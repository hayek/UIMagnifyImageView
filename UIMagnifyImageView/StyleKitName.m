//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 6/30/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawMagnifyWithWidth: (CGFloat)width;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    CGFloat aspect = width * 1 / 200.0;
    CGFloat plusAspect = 3.0 / (aspect * 6);
    CGFloat radiusAspect = aspect + 2 * 10;

    //// Frames
    CGRect frame = CGRectMake(0, 0, width, width);


    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame), CGRectGetMaxY(frame));
    CGContextScaleCTM(context, aspect, aspect);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, -113, 113, 113) cornerRadius: radiusAspect];
    [UIColor.lightGrayColor setFill];
    [rectanglePath fill];
    [UIColor.lightGrayColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// plus Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame), CGRectGetMinY(frame));
    CGContextScaleCTM(context, aspect, aspect);

    UIBezierPath* plusPath = UIBezierPath.bezierPath;
    [plusPath moveToPoint: CGPointMake(18, 170.5)];
    [plusPath addLineToPoint: CGPointMake(18, 193.5)];
    [plusPath moveToPoint: CGPointMake(29.5, 182)];
    [plusPath addLineToPoint: CGPointMake(6.5, 182)];
    [UIColor.whiteColor setStroke];
    plusPath.lineWidth = plusAspect;
    [plusPath stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 0.5, CGRectGetMinY(frame) + 0.5, CGRectGetWidth(frame) - 1, CGRectGetHeight(frame) - 1)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];
    [UIColor.lightGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];
}

+ (void)drawRoundRectViewWithShadowWithFrame: (CGRect)frame;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.6];
    CGSize shadowOffset = CGSizeMake(0.1, 2.1);
    CGFloat shadowBlurRadius = 5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame) + 10, CGRectGetMinY(frame) + 10, CGRectGetWidth(frame) - 20, CGRectGetHeight(frame) - 25) cornerRadius: 5];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    [UIColor.whiteColor setFill];
    [rectanglePath fill];
    CGContextRestoreGState(context);
}

@end
